<?php
// $Id$

/**
 * @file
 * Simple filter for Drupal.
 *
 * Checks the content for <a>-elements and automatically fetches and stores the corresponding favicon.ico if availlable.
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 * for erdfisch :: internetl√∂sungen http://erdfisch.de
 */

// Path to directory where favicons are stored
define('UI_FILE_PATH', file_directory_path() .'/urlicon');

/**
 * Implementation of hook_help().
 */
function urlicon_help($section) {
  switch ($section) {
    case 'admin/help#urlicon':
      $output = '<p>'. t('The URLIcon module automatically adds a CSS class to &lt;a&gt;-elements reflecting their target and fetches the favicon from the target site.') .'</p>';
      $output .= '<p>'. t('<p>Use Input Formats to enable the URL filter') .'</p>';
      $output .= t('<ol><li>Select an existing Input Format or add a new one</li><li>Configure the Input Format</li><li>Enable URL class filter and Save configuration</li><li>Rearrange the weight of the URL filter depending on what filters exist in the format</li></ol>');
      $output .= t('<p>You can enable the urlfilter for an input format from <a href="%admin-filters">administer &gt;&gt; Site Configuration &gt;&gt; Input Filter</a>.', array('%admin-filters' => url('admin/settings/filters')));
      return $output;
    case 'admin/modules#description':
      return t('Automatically fetch favicons for URLs.');
  }
}

/**
 * Implementation of hook_menu().
 */
function urlicon_menu($may_cache) {
  drupal_add_css(drupal_get_path('module', 'urlicon'). '/urlicon.css');
}

/**
 * Implementation of hook_filter().
 */
function urlicon_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('URL Icon filter'));
    
    case 'description':
      return t('Adds favicons to URLs.');
    
    case 'process':
      // check for directory
      $dir = UI_FILE_PATH;
      file_check_directory($dir, 1);
      
      $text = preg_replace_callback('/<a.+?href=\"((http|https|ftp|telnet|news|mms):\/\/.+?)\"[^>]*>(.+?)<\/a>/i', 'urlicon_replace', $text);
      
      return $text;
    
    default:
      return $text;
  }
}

/**
 * Callback for filter
 */
function urlicon_replace($match) {
  // Define acceptable Content-Types
  // see http://www.iana.org/assignments/media-types/image/vnd.microsoft.icon
  $ui_ctype = array(
    'application/ico',
    'application/octet-stream',
    'image/vnd.microsoft.icon',
    'image/ico',
    'image/icon',
    'image/x-icon',
    'text/ico',
    'text/plain',
  );
  $dir = UI_FILE_PATH;
  
  $url = @parse_url($match[1]);
  $domain = explode('.', $url['host']);
  $domain = check_url(str_replace('.', '_', $url['host']));

  //check if favicon exists locally
  if ($url['host'] AND !file_exists($dir .'/'. $domain .'.ico')) {
  
    //check for favicon in metatags
    $data = drupal_http_request(check_url($match[1]));
    
    if (preg_match('/<link[^>]+rel="(?:shortcut )?icon"[^>]+?href="([^"]+?)"/si', $data->data, $icons)) {
      
      if (strpos($icons[1], '://')) {
        // absolute path
        $data = drupal_http_request(check_url($icons[1]));
      }
      else if (substr($icons[1], 0, 3) == '../') {
        // relative path
        $path = '';
        $elements = explode('/', $url['path']);
        $i = 0;
        while (!strpos($elements[$i], '.') AND $i <= count($elements)) {
          $path .= $elements[$i] .'/';
          $i++;
        }
        
        $data = drupal_http_request(check_url($url['scheme'] .'://'. $url['host'] . $path . $icons[1]));
      }
      else if (substr($icons[1], 0, 1) == '/') {
        // relative path
        $data = drupal_http_request(check_url($url['scheme'] .'://'. $url['host'] . $icons[1]));
      }
      else {
        // get favicon from webroot
        $data = drupal_http_request(check_url('http://'. $url['host'] .'/favicon.ico'));
        watchdog('urlicon', t('Could not find favicon for URL %url with shortcut url %shortcut, trying webroot.', array('%url' => $match[1], '%shortcut' =>$icons[1])), WATCHDOG_ERROR);
      }
      
    }
    else {
      // get favicon from webroot
      $data = drupal_http_request(check_url('http://'. $url['host'] .'/favicon.ico'));
      watchdog('urlicon', t('Could not find favicon for URL %url in metatags, trying webroot.', array('%url' => $match[1])));
    }
    
    // Verify if the favicon was returned
    if (($data->code == '200' OR $data->redirect_code == '200') AND ($data->headers['Content-Length'] > 0 OR $data->headers['Content-length'] > 0)) {
      //check for acceptable Content-Type
      //TODO: refactor code
      $content_type_1 = explode(';', $data->headers['Content-Type']);
      $content_type_2 = explode(';', $data->headers['Content-type']);
      
      if (in_array($content_type_1[0], $ui_ctype) OR in_array($content_type_2[0], $ui_ctype)) {
        //save favicon to file
        file_save_data($data->data, $dir .'/'. $domain .'.ico', FILE_EXISTS_REPLACE);
      }
      
    }
    
  }
  
  // check for favicon availlability
  if (file_exists($dir .'/'. $domain .'.ico')) {
    // if availlable show it
    $match[0] = str_replace('</a>', ' '. theme_urlicon($dir .'/'. $domain .'.ico', '', $url['host'], array('class' => 'urlicon urlicon-'. $domain)). '</a>', $match[0]);
  }
  else {
    // if not availlable provide a default icon
    $match[0] = str_replace('</a>', ' '. theme_urlicon(drupal_get_path('module', 'urlicon') .'/favicon.ico', '', $url['host'], array('class' => 'urlicon urlicon-external')). '</a>', $match[0]);
  }
  
  return $match[0];
}

/**
 * Return a themed favicon.
 */
function theme_urlicon($path, $alt = '', $title = '', $attributes = NULL, $getsize = FALSE) {
  if (!$getsize || (is_file($path) && (list($width, $height, $type, $image_attributes) = @getimagesize($path)))) {
    $attributes = drupal_attributes($attributes);
    $url = (url($path) == $path) ? $path : (base_path() . $path);
    return '<img src="'. check_url($url) .'" alt="'. check_plain($alt) .'" title="'. check_plain($title) .'" '. $image_attributes . $attributes .' />';
  }
}
